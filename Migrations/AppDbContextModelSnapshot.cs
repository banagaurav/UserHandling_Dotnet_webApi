// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserHandling.Data;

#nullable disable

namespace UserHandling.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserHandling.Models.Pdf", b =>
                {
                    b.Property<int>("PdfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PdfId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PdfId");

                    b.ToTable("Pdfs");

                    b.HasData(
                        new
                        {
                            PdfId = 1,
                            Description = "A beginner's guide to C# programming.",
                            FilePath = "/pdfs/csharp_intro.pdf",
                            Title = "Introduction to C#"
                        },
                        new
                        {
                            PdfId = 2,
                            Description = "An advanced guide to C# programming.",
                            FilePath = "/pdfs/csharp_advanced.pdf",
                            Title = "Advanced C#"
                        },
                        new
                        {
                            PdfId = 3,
                            Description = "Learn about database management systems.",
                            FilePath = "/pdfs/dbms.pdf",
                            Title = "Database Management Systems"
                        },
                        new
                        {
                            PdfId = 4,
                            Description = "Fundamentals of web development using HTML, CSS, and JavaScript.",
                            FilePath = "/pdfs/web_development.pdf",
                            Title = "Web Development Basics"
                        },
                        new
                        {
                            PdfId = 5,
                            Description = "Introduction to mobile app development for iOS and Android.",
                            FilePath = "/pdfs/mobile_app_development.pdf",
                            Title = "Mobile App Development"
                        });
                });

            modelBuilder.Entity("UserHandling.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            Password = "AQAAAAIAAYagAAAAEE55v591Wy9/V2Sl4/9gOkx8cyUywIJ5bXOR3eOd03sCitN8cO7c/tN/4iUM3ONgSA==",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2025, 1, 15, 10, 5, 0, 0, DateTimeKind.Utc),
                            Email = "user1@example.com",
                            Password = "AQAAAAIAAYagAAAAEFqC+9F0gQNCLEVTz8ES4ZLQWrprMd7C5LvCq01NALKZSJMpZg1eCZ7/FNsmQk3img==",
                            Role = "User",
                            Username = "user1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2025, 1, 15, 10, 10, 0, 0, DateTimeKind.Utc),
                            Email = "user2@example.com",
                            Password = "AQAAAAIAAYagAAAAEMMaHQ8i4KZbcPQIT1lVueRfT0UEzxqCwu1pZRAhaDOEOIG2ggqELYNvtNCY/e5jQg==",
                            Role = "User",
                            Username = "user2"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedAt = new DateTime(2025, 1, 15, 10, 15, 0, 0, DateTimeKind.Utc),
                            Email = "alice.jones@example.com",
                            Password = "AQAAAAIAAYagAAAAEKPWJOutnj0zx2f2OU60XAEEz6aEnZTA3YOto0/OLwiwdSUb/0pSX/S3uLlYgsdbTQ==",
                            Role = "User",
                            Username = "alice_jones"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedAt = new DateTime(2025, 1, 15, 10, 20, 0, 0, DateTimeKind.Utc),
                            Email = "bob.white@example.com",
                            Password = "AQAAAAIAAYagAAAAEFnJ+PJv3Z4qRQeGS1UwoAIm/uGg9rSCJSbAHSV08Xl0bpbu3jlz6M0tvD9DbZjXjA==",
                            Role = "Admin",
                            Username = "bob_white"
                        });
                });

            modelBuilder.Entity("UserHandling.Models.UserPdf", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PdfId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PdfId");

                    b.HasIndex("PdfId");

                    b.ToTable("UserPdfs");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PdfId = 1
                        },
                        new
                        {
                            UserId = 1,
                            PdfId = 2
                        },
                        new
                        {
                            UserId = 2,
                            PdfId = 3
                        },
                        new
                        {
                            UserId = 2,
                            PdfId = 4
                        },
                        new
                        {
                            UserId = 3,
                            PdfId = 5
                        });
                });

            modelBuilder.Entity("UserHandling.Models.UserPdf", b =>
                {
                    b.HasOne("UserHandling.Models.Pdf", "Pdf")
                        .WithMany("UserPdfs")
                        .HasForeignKey("PdfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserHandling.Models.User", "User")
                        .WithMany("UserPdfs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pdf");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserHandling.Models.Pdf", b =>
                {
                    b.Navigation("UserPdfs");
                });

            modelBuilder.Entity("UserHandling.Models.User", b =>
                {
                    b.Navigation("UserPdfs");
                });
#pragma warning restore 612, 618
        }
    }
}
